campaign-management-system/
│
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── campaignmanagement/
│   │   │               ├── CampaignManagementApplication.java
│   │   │               ├── controller/
│   │   │               │   └── CampaignController.java
│   │   │               ├── service/
│   │   │               │   └── CampaignService.java
│   │   │               ├── repository/
│   │   │               │   └── CampaignRepository.java
│   │   │               └── entity/
│   │   │                   └── Campaign.java
│   │   └── resources/
│   │       ├── application.properties
│   │       └── static/
│   │           └── ...
│   └── test/
│       └── java/
│           └── com/
│               └── example/
│                   └── campaignmanagement/
│                       └── CampaignManagementApplicationTests.java
└── pom.xml


Entity:
package com.example.campaignmanagement.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.NotBlank;

@Entity
public class Campaign {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    private String name;

    private String description;
    
    // Getters and Setters
}

Repository:
package com.example.campaignmanagement.repository;

import com.example.campaignmanagement.entity.Campaign;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CampaignRepository extends JpaRepository<Campaign, Long> {
    // Custom query methods (if needed) can be added here
}

Service:
package com.example.campaignmanagement.service;

import com.example.campaignmanagement.entity.Campaign;
import com.example.campaignmanagement.repository.CampaignRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CampaignService {

    @Autowired
    private CampaignRepository campaignRepository;

    public List<Campaign> getAllCampaigns() {
        return campaignRepository.findAll();
    }

    public Optional<Campaign> getCampaignById(Long id) {
        return campaignRepository.findById(id);
    }

    public Campaign saveCampaign(Campaign campaign) {
        return campaignRepository.save(campaign);
    }

    public void deleteCampaign(Long id) {
        campaignRepository.deleteById(id);
    }
}

Contoller:
package com.example.campaignmanagement.controller;

import com.example.campaignmanagement.entity.Campaign;
import com.example.campaignmanagement.service.CampaignService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/campaigns")
public class CampaignController {

    @Autowired
    private CampaignService campaignService;

    @GetMapping
    public List<Campaign> getAllCampaigns() {
        return campaignService.getAllCampaigns();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Campaign> getCampaignById(@PathVariable Long id) {
        Optional<Campaign> campaign = campaignService.getCampaignById(id);
        return campaign.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public Campaign createCampaign(@RequestBody Campaign campaign) {
        return campaignService.saveCampaign(campaign);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Campaign> updateCampaign(@PathVariable Long id, @RequestBody Campaign campaign) {
        if (!campaignService.getCampaignById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        campaign.setId(id);
        return ResponseEntity.ok(campaignService.saveCampaign(campaign));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCampaign(@PathVariable Long id) {
        if (!campaignService.getCampaignById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        campaignService.deleteCampaign(id);
        return ResponseEntity.noContent().build();
    }
}

Main:
package com.example.campaignmanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CampaignManagementApplication {

    public static void main(String[] args) {
        SpringApplication.run(CampaignManagementApplication.class, args);
    }
}

Application Properties
spring.datasource.url=jdbc:mysql://localhost:3306/campaign_db
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

Testing:
package com.example.campaignmanagement;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CampaignManagementApplicationTests {

    @Test
    void contextLoads() {
    }
}
